#!/usr/bin/env python3

from re import T
import sys
import socket
import select
import json
import argparse
import time

# First, grab our arguments from the command line
#  bridge_id is our bridge ID ("1234" or whatever)
#  lan_ports are the local UDP ports that we use to send/receive packets on our LAN(s)
parser = argparse.ArgumentParser(description='CS 3700 bridge')
parser.add_argument('bridge_id', type=str, help="Bridge ID (e.g., 02ab)")
parser.add_argument('lan_ports', metavar='lan_port', type=int, nargs='+', help="UDP ports to connect to LANs")
args = parser.parse_args()

# This variable represents our bridge's ports.  It is a 0-indexed array, as per the project spec
PORTS = []


# Definition of a port
class Port:
    def __init__(self, id, lan_port):
        self.id = id
        self.lan_port = lan_port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))

    # This method sends a BPDU on this port.  Right now, it only sends a
    # BPDU that says this bridge believes its the root; obviously, this
    # will need to be updated.
    def send_bpdu(self, bpdu):
        bpdu['message']['port'] = self.id
        self.send(json.dumps(bpdu).encode('utf-8'))

    # This method sends the provided byte array "data" to the LAN, using the
    # UDP connection.
    def send(self, data):
        print("Sending message on port %d" % self.id)
        self.socket.sendto(data, ('localhost', self.lan_port))


# Set up our ports
print("Bridge starting up")

temp_list = []
# This for loop will assign each lan port a port number starting from 0 to n,
# and if a lan port appear twice, it will be discarded.
for i, lan_port in enumerate(args.lan_ports):
    if not lan_port in temp_list:
        PORTS.append(Port(i, lan_port))
        temp_list.append(lan_port)


# This method sends a BPDU on all ports.  You might want to call this regularly...
def send_bpdus(bpdu):
    for port in PORTS:
        port.send_bpdu(bpdu)


# Invariant, the input must be two bpdu
# This part will determine whether the root bridge and port should be changed or not. If changed, it will send a
# True as root being changed, and if not changetd, it will send a False as a signal of not changing.
def update_root_bpdu(root_bpdu, bpdu, input_port):
    change_flag = False
    root_id = root_bpdu.get('message', 0).get('root', 0)
    message_id = bpdu.get('message', 0).get('root', -1)
    root_cost = root_bpdu['message']['cost']
    bpdu_cost = bpdu['message']['cost']
    # First Condition: The received message has a smaller root id.
    if root_id > message_id:
        root_bpdu['message']['root'] = message_id
        root_bpdu['message']['cost'] = bpdu_cost + 1
        root_bpdu['message']['port'] = message['message']['port']
        change_flag = True
    # Second Condition: The received message has a smaller cost.
    elif (root_id == message_id) & (root_cost > (bpdu_cost + 1)):
        root_bpdu['message']['root'] = message_id
        root_bpdu['message']['cost'] = bpdu_cost + 1
        root_bpdu['message']['port'] = message['message']['port']
        change_flag = True
    # Third Condition: The received message port is smaller.
    elif ((root_id == message_id) & (root_cost == (bpdu_cost + 1)) & (
            ROOT_PORT > input_port)):
        root_bpdu['message']['root'] = message_id
        root_bpdu['message']['cost'] = bpdu_cost + 1
        root_bpdu['message']['port'] = message['message']['port']
        change_flag = True

    return change_flag


# This will broadcast the given data.
def broadcast(data):
    for port in PORTS:
        port.send(data)


# This will transfer the lan port id to the 0 indexed id in our port class.
def transfer_port_to_port_id(port):
    for x in range(len(PORTS)):
        if PORTS[x].lan_port == port:
            return PORTS[x].id


# This will determine whether the bridge in its local view is finished or not.
def is_tree_finished(port_message_list):
    result = True
    result_holder = True
    self_root_bridge = root_bridge['message']['root']
    for k in port_message_list.keys():
        if not is_unified(port_message_list[k], self_root_bridge):
            return False
        elif result_holder:
            result_holder = port_message_list[k][0]['root']
        # This will determine whether all ports in the bridge share the small root bridge or not.
        else:
            result = result and result_holder == port_message_list[k][0]['root']
            result_holder = port_message_list[k][0]['root']
    return result


# This determines whether all the root bridges in the stored lists for one specific port have the small
# root bridge.
def is_unified(port_list, self_root_bridge):
    result = True
    if len(port_list) == 1:
        if port_list[0]['root'] == self_root_bridge:
            return True
        else:
            return False
    else:
        for x in range(len(port_list) - 1):
            result = (result and (port_list[x]['root'] == port_list[x + 1]['root'])
                      and (port_list[x]['root'] == self_root_bridge))
            if not result:
                return False
    return result


# This part will convert the received message into our stored dictionary (funtioning as forwarding table).
# Format as {#port_id 0 : [{'info': {'bridge': 9e3a, 'port': 1} , 'root': 08ad, 'cost': 1, 'time' : 10086},
#                          {'info': {'bridge': ff3a, 'port': 2} , 'root': 08ad, 'cost': 2, 'time' : 10010}],
#            #port_id 1 : [{'info': {'bridge': 54de, 'port': 1} , 'root': 08ad, 'cost': 1, 'time' : 10000}]}
def message_processor(port_list, message, input_port):
    if port_list.get(input_port, "True") == "True":
        # This indicates that the list does not store this port information before.
        port_list.update({input_port: [{'info': {'bridge': message['message']['id'], 'port': message['message']['port']}
                                           , 'root': message['message']['root'], 'cost': message['message']['cost'],
                                        'time': (int(round(time.time() * 1000)))}]})
    else:
        # This will update the information stored in the port's list.
        port_list.update({input_port: update_bpdu_in_array(port_list.get(input_port), message)})


def update_bpdu_in_array(ports, message):
    finish_flag = False
    for x in range(len(ports)):
        # This will update the information received for the port that stored before.
        if ((message['message']['id'] == ports[x]['info']['bridge'])
                and (message['message']['port'] == ports[x]['info']['port'])):
            ports[x] = {'info': {'bridge': message['message']['id'], 'port': message['message']['port']}
                , 'root': message['message']['root'], 'cost': message['message']['cost'],
                        'time': (int(round(time.time() * 1000)))}
            finish_flag = True

    if not finish_flag:
        # This indicates that it received a new information from a new port.
        ports.append({'info': {'bridge': message['message']['id'], 'port': message['message']['port']}
                         , 'root': message['message']['root'], 'cost': message['message']['cost'],
                      'time': (int(round(time.time() * 1000)))})
    return ports


# This will determine which ports are designated, which are disabled.
def determine_dest_port(port_list, dest_list, block_list):
    for x in range(len(PORTS)):
        # This part indicates that there is no incoming message on this port.
        if port_list.get(PORTS[x].id, "True") == "True":
            dest_list.append(PORTS[x].id)
            print("Designated port: %s" % PORTS[x].id)
    for k in port_list.keys():
        if not k == ROOT_PORT:
            dest_flag = True
            for y in range(len(port_list[k])):
                # This indicates that this port is not the best port on the LAN with larger cost.
                if port_list[k][y]['cost'] < root_bridge['message']['cost']:
                    dest_flag = False
                # This indicates that this port is not the best port on the LAN with larger bridge ID.
                elif (port_list[k][y]['cost'] == root_bridge['message']['cost']
                      and port_list[k][y]['info']['bridge'] < root_bridge['source']):
                    dest_flag = False
            if dest_flag:
                dest_list.append(k)
                print("Designated port: '%s'" % k)
            else:
                block_list.append(k)
                print("Disabled port: '%s'" % k)
        else:
            for x in range(len(PORTS)):
                dest_list = []
                dest_list.append(PORTS[x].id)


# This returns whether this port is disabled or not.
def is_in_disable(port):
    result = False
    for x in range(len(BLOCK_LIST)):
        if BLOCK_LIST[x] == port:
            return True
    return result


# This indicates that which tells the result of the forwarding port and whether forward or not.
def is_in_forward_table(dest, port_list):
    forward_result = "False"
    forward_port = -1
    for k in port_list.keys():
        if not is_in_disable(k):
            for x in range(len(port_list[k])):
                if port_list[k][x]['info']['bridge'] == dest:
                    forward_result = "True"
                    forward_port = k
    return {'result': forward_result, 'port': forward_port}


# This part will determine which port should forward the message or not forwarding or broadcasting.
def broadcast_single(port_id, message, port_list, data):
    # This indicates that the message arrives at the designated bridge.
    if message['dest'] == root_bridge['source']:
        print("Not forwarding %s/%s" % (message['source'], message['msg_id']))
    # This indicates that the destination is in the forwarding table with a specific port.
    elif is_in_forward_table(message['dest'], port_list)['result'] == "True":
        forward_port = is_in_forward_table(message['dest'], port_list)['port']
        for port in PORTS:
            if port.id == forward_port:
                port.send(data)
                print("Forwarding %s/%s to port %s" % (message['source'], message['msg_id'], port.id))
    # This indicates that the destination is not in the forwarding table and it will be broadcast.
    else:
        for port in PORTS:
            if (port.id != port_id) and (not is_in_disable(port.id)):
                port.send(data)
        print("Broadcasting %s/%s to all active ports" % (message['source'], message['msg_id']))


# This will check whether the bridge is time-out or not.
def check_dead_bridge():
    for k in PORT_LIST.keys():
        for x in range(len(PORT_LIST[k])):
            if PORT_LIST[k][x]['time'] + 500 < (int(round(time.time() * 1000))):
                return True
    return False


PORT_LIST = {}
BLOCK_LIST = []
DES_LIST = []
ROOT_PORT = -1

root_bridge = {"source": args.bridge_id,
               "dest": "ffff",
               "msg_id": 0,
               "type": "bpdu",
               "message": {"id": args.bridge_id,
                           "root": args.bridge_id,
                           "cost": 0,
                           "port": 0}}

# Now we send a "hello" BPDU to all LANs to announce that we're here
send_bpdus(root_bridge)
start = (int(round(time.time() * 1000)))
start2 = (int(round(time.time() * 1000)))

# Main loop
while True:
    sockets = list(map(lambda p: p.socket, PORTS))
    readable, _, execeptable = select.select(sockets, [], sockets)
    # This part will send bpdu every 500ms.
    if start + 500 < (int(round(time.time() * 1000))):
        send_bpdus(root_bridge)
        start = (int(round(time.time() * 1000)))

    # 　This will check any time-out bridge for every 700ms. If there is a time-out bridge, the network will be
    #   reconfigured.
    if start2 + 700 < (int(round(time.time() * 1000))):
        if check_dead_bridge():
            root_bridge = {"source": args.bridge_id,
                           "dest": "ffff",
                           "msg_id": 0,
                           "type": "bpdu",
                           "message": {"id": args.bridge_id,
                                       "root": args.bridge_id,
                                       "cost": 0,
                                       "port": 0}}
            PORT_LIST = {}
            DES_LIST = []
            BLOCK_LIST = []
            ROOT_PORT = -1

    for s in readable:
        # This will will process the message.
        data, addr = s.recvfrom(1500)
        message = data.decode('utf-8')
        message = json.loads(message)

        # This part indicates that the received message stands for bpdu.
        if message['type'] == "bpdu":
            DES_LIST = []
            BLOCK_LIST = []
            # This part processed the message into our forwarding table dictionary.
            message_processor(PORT_LIST, message, transfer_port_to_port_id(addr[1]))
            # This part will determine whether the root bridge and port should be changed or not and change to
            # which port and bridge.
            change_flag = update_root_bpdu(root_bridge, message, transfer_port_to_port_id(addr[1]))
            # Every time the root bridge and port changes, the block list and designated list will be reconfigured.
            if change_flag:
                print("New root '%s' cost '%s'" % (root_bridge['message']['root'], root_bridge['message']['cost']))
                ROOT_PORT = transfer_port_to_port_id(addr[1])
                DES_LIST = []
                BLOCK_LIST = []
                print("Root Port: '%s'" % transfer_port_to_port_id(addr[1]))
                send_bpdus(root_bridge)
            # This part indicates that the root port in the forwarding table is not unified and continue to send bpdu
            # for updating.
            if not is_tree_finished(PORT_LIST):
                send_bpdus(root_bridge)
                continue
            # This part indicates that the spanning tree is finished on this local part as all ports on the LAN share
            # the same root bridge and it will determine the designated list and block list.
            else:
                determine_dest_port(PORT_LIST, DES_LIST, BLOCK_LIST)

        # This indicates that the received message is a data message.
        if message['type'] == "data":
            # This will determine whether the received message is on disabled port or designated port or root port.
            if not is_in_disable(transfer_port_to_port_id(addr[1])):
                print("Received message: %s/%s on port %s to %s" % (message['source'], message['msg_id'],
                                                                    transfer_port_to_port_id(addr[1]), message['dest']))
                # This will use the forwarding table to determine which ports should forward the data, or it arrives
                # at the destination or it needs to be broadcast.
                broadcast_single(transfer_port_to_port_id(addr[1]), message, PORT_LIST, data)
